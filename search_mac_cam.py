import telnetlib
import re
import multiprocessing

ips_of_switches = set(("10.100.2.1", "10.100.2.2", "10.100.11.3", "10.100.11.4",
                       "10.100.11.5", "10.100.11.6", "10.100.12.3", "10.100.12.4", "10.100.12.5", "10.100.12.6",
                       "10.100.13.3", "10.100.13.4", "10.100.13.5", "10.100.14.3", "10.100.14.4", "10.100.14.5",
                       "10.100.14.6", "10.100.14.7", "10.100.15.3", "10.100.15.4", "10.100.15.5", "10.100.15.6",
                       "10.100.15.7", "10.100.15.8", "10.100.15.9", "10.100.15.10", "10.100.16.3", "10.100.16.4",
                       "10.100.16.5", "10.100.16.6", "10.100.16.7", "10.100.16.8", "10.100.16.9", "10.100.17.3",
                       "10.100.17.4", "10.100.17.5", "10.100.17.6", "10.100.17.7", "10.100.17.8", "10.100.17.9",
                       "10.100.18.3", "10.100.18.4", "10.100.18.5", "10.100.18.6", "10.100.18.7", "10.100.19.3",
                       "10.100.19.4", "10.100.19.5", "10.100.19.6", "10.100.19.7", "10.100.19.8", "10.100.20.3",
                       "10.100.20.4", "10.100.20.5", "10.100.20.6", "10.100.20.7", "10.100.21.3", "10.100.21.4",
                       "10.100.21.5", "10.100.21.6", "10.100.21.7", "10.100.21.8", "10.100.21.9", "10.100.21.10",
                       "10.100.21.11", "10.100.21.12", "10.100.95.3", "10.100.96.3", "10.100.31.1", "10.100.31.2",
                       "10.100.31.3", "10.100.31.4", "10.100.31.5", "10.100.32.1", "10.100.32.2", "10.100.32.3",
                       "10.100.32.4", "10.100.32.5", "10.100.32.6", "10.100.32.7", "10.100.32.8", "10.100.32.9",
                       "10.100.32.10", "10.100.32.11", "10.100.32.12", "10.100.32.13", "10.100.32.14", "10.100.33.3",
                       "10.100.33.4", "10.100.33.5", "10.100.33.6", "10.100.33.7", "10.100.33.8", "10.100.33.9",
                       "10.100.33.10", "10.100.33.11", "10.100.33.12", "10.100.33.13", "10.100.33.14", "10.100.33.15",
                       "10.100.33.16", "10.100.34.1", "10.100.34.2", "10.100.34.3", "10.100.34.4",
                       "10.100.34.5", "10.100.34.6", "10.100.34.7", "10.100.34.8", "10.100.34.9", "10.100.34.10",
                       "10.100.34.11", "10.100.34.12", "10.100.34.13", "10.100.34.14", "10.100.34.15", "10.100.42.1",
                       "10.100.42.2", "10.100.51.3", "10.100.51.4", "10.100.51.5", "10.100.52.3", "10.100.52.4",
                       "10.100.52.5", "10.100.53.3", "10.100.53.4", "10.100.53.5", "10.100.54.3", "10.100.54.4",
                       "10.100.54.5", "10.100.54.6", "10.100.54.7", "10.100.55.3", "10.100.55.4", "10.100.55.5",
                       "10.100.55.6", "10.100.56.3", "10.100.56.4", "10.100.56.5", "10.100.57.3", "10.100.57.4",
                       "10.100.58.3", "10.100.58.4", "10.100.59.3", "10.100.59.4", "10.100.59.5", "10.100.60.3",
                       "10.100.62.1", "10.100.62.2", "10.100.71.3", "10.100.71.4", "10.100.71.5", "10.100.71.6",
                       "10.100.72.3", "10.100.72.4", "10.100.72.5", "10.100.72.6", "10.100.73.3", "10.100.73.4",
                       "10.100.73.5", "10.100.74.3", "10.100.74.4", "10.100.74.5", "10.100.74.6", "10.100.74.7",
                       "10.100.74.8", "10.100.74.9", "10.100.74.10", "10.100.74.11", "10.100.75.3", "10.100.75.4",
                       "10.100.75.5", "10.100.75.6", "10.100.75.7", "10.100.75.8", "10.100.75.9", "10.100.75.10",
                       "10.100.76.3", "10.100.76.4", "10.100.76.5", "10.100.76.6", "10.100.76.7", "10.100.76.8",
                       "10.100.76.9", "10.100.77.3", "10.100.77.4", "10.100.77.5", "10.100.77.6", "10.100.78.3",
                       "10.100.78.4", "10.100.78.5", "10.100.78.6", "10.100.78.7", "10.100.79.3", "10.100.79.4",
                       "10.100.79.5", "10.100.79.6", "10.100.79.7", "10.100.79.8", "10.100.81.3", "10.100.81.4",
                       "10.100.81.5", "10.100.81.6", "10.100.91.1", "10.100.91.2", "10.100.91.3", "10.100.91.4",
                       "10.100.91.5", "10.100.91.6", "10.100.91.7", "10.100.91.8", "10.100.91.9", "10.100.91.10",
                       "10.100.91.11", "10.100.91.12", "10.100.91.13", "10.100.91.14", "10.100.92.3", "10.100.92.4",
                       "10.100.92.5", "10.100.92.6", "10.100.92.7", "10.100.92.8", "10.100.92.9", "10.100.92.10",
                       "10.100.92.11", "10.100.92.12", "10.100.92.13", "10.100.92.14", "10.100.92.15", "10.100.92.16",
                       "10.100.93.1", "10.100.93.2", "10.100.93.3", "10.100.93.4", "10.100.93.5", "10.100.93.6",
                       "10.100.93.7", "10.100.93.8", "10.100.93.9", "10.100.93.10", "10.100.93.11", "10.100.93.12",
                       "10.100.93.13", "10.100.93.14", "10.100.93.15", "10.100.94.1", "10.100.94.2", "10.100.94.3",
                       "10.100.94.4", "10.100.94.5", "10.100.94.6", "10.100.94.7", "10.100.94.8", "10.100.94.9",
                       "10.100.94.10", "10.100.94.11", "10.100.94.12",))


def search_mac_telnet(ip, target_mac):
    flag = 0
    while flag < 3:
        try:
            tn = telnetlib.Telnet(ip, timeout=5)
            flag = 3
        except TimeoutError as exc:
            tn = None
            flag += 1
            if flag >= 3:
                print('Недоступны: ', ip, exc)
                return
    tn.read_until(b"UserName:")
    user = 'admin'
    password = 'admin'
    tn.write(user.encode() + b"\n")
    tn.read_until(b"PassWord:")
    tn.write(password.encode() + b"\n")
    for p in range(1, 25):
        tn.write(('show fdb port ' + str(p)).encode() + b'\n')
        res = tn.read_until('Priori'.encode(), timeout=0.5)
        rsl_list = res.decode('ascii').split()

        for i, s in enumerate(rsl_list):
            r = re.search(r'F0-23-[0-9A-F][0-9A-F]-[0-9A-F][0-9A-F]-[0-9A-F][0-9A-F]-[0-9A-F][0-9A-F]', str(s))
            if r:
                res2 = r
                spl_mac = str(res2.group()).lower().split('-')
                mac = spl_mac[0] + ':' + spl_mac[1] + ':' + spl_mac[2] + ':' + spl_mac[3] + ':' \
                      + spl_mac[4] + ':' + spl_mac[5]
                try:
                    port = rsl_list[i + 1]
                except IndexError as exc:
                    print(rsl_list, exc)
                    return
                if mac == target_mac:
                    print("Founded!: ", ip, port)
            else:
                continue
    tn.close()


if __name__ == '__main__':
    print(len(ips_of_switches))

    procs = []
    for sw in ips_of_switches:
        proc = multiprocessing.Process(target=search_mac_telnet, args=(sw, 'f0:23:b9:6e:cc:f1'))
        procs.append(proc)
        proc.start()
